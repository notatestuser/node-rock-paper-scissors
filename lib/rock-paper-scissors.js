// Generated by CoffeeScript 1.3.3
(function() {
  var RockPaperScissors, shuffleArray;

  shuffleArray = function(arr) {
    var i, j, _ref, _results;
    i = arr.length;
    if (i === 0) {
      return false;
    }
    _results = [];
    while (--i) {
      j = Math.floor(Math.random() * (i + 1));
      _results.push((_ref = [arr[j], arr[i]], arr[i] = _ref[0], arr[j] = _ref[1], _ref));
    }
    return _results;
  };

  RockPaperScissors = (function() {

    RockPaperScissors.DefaultWeaponSet = module.require('./weapon-sets/traditional-set');

    function RockPaperScissors(weapons, shuffle) {
      this.weapons = weapons != null ? weapons : this.DefaultWeaponSet;
      this.shuffle = shuffle != null ? shuffle : true;
      this.players = [];
    }

    RockPaperScissors.prototype.getWeapons = function() {
      return Object.keys(this.weapons);
    };

    RockPaperScissors.prototype.addPlayer = function(playerName, weapon) {
      this.players.push({
        name: playerName,
        weapon: weapon,
        alive: true
      });
      return this;
    };

    RockPaperScissors.prototype.clearPlayers = function() {
      this.players = [];
      return this;
    };

    RockPaperScissors.prototype.playRound = function() {
      var _ref;
      if (this.players.length >= 2) {
        if (this.shuffle) {
          shuffleArray(this.players);
        }
        _ref = [this.players.shift(), this.players.shift()], this.lastPlayer1 = _ref[0], this.lastPlayer2 = _ref[1];
        if (Object.keys(this.weapons[this.lastPlayer2.weapon]).indexOf(this.lastPlayer1.weapon) > -1) {
          this.lastPlayer1.alive = false;
        }
        if (Object.keys(this.weapons[this.lastPlayer1.weapon]).indexOf(this.lastPlayer2.weapon) > -1) {
          this.lastPlayer2.alive = false;
        }
        if (!!this.lastPlayer1.alive) {
          this.players.push(this.lastPlayer1);
        }
        if (!!this.lastPlayer2.alive) {
          this.players.push(this.lastPlayer2);
        }
        return [this.lastPlayer1, this.lastPlayer2];
      } else {
        return this.players;
      }
    };

    RockPaperScissors.prototype.playRoundForText = function() {
      var player1, player1Full, player2, player2Full, result, _ref;
      result = this.playRound();
      if (result.length === 0) {
        return "All players have killed each other - nobody wins";
      } else if (result.length === 1) {
        return "" + result[0].name + " has won the game with their " + result[0].weapon;
      } else {
        _ref = [result[0], result[1]], player1 = _ref[0], player2 = _ref[1];
        player1Full = player1.name + "'s " + player1.weapon;
        player2Full = player2.name + "'s " + player2.weapon;
        if (player1.alive && player2.alive) {
          return "" + player1Full + " drew against " + player2Full;
        } else if (player1.alive && !player2.alive) {
          return "" + player1Full + " " + this.weapons[player1.weapon][player2.weapon] + " " + player2Full;
        } else if (player2.alive && !player1.alive) {
          return "" + player2Full + " " + this.weapons[player2.weapon][player1.weapon] + " " + player1Full;
        } else {
          return "" + player1Full + " and " + player2Full + " killed each other";
        }
      }
    };

    RockPaperScissors.prototype.isGameOver = function() {
      return this.players.length <= 1 || (this.players.length === 2 && this.lastPlayer1 === this.players[0] && this.lastPlayer2 === this.players[1]);
    };

    return RockPaperScissors;

  })();

  module.exports = RockPaperScissors;

}).call(this);
